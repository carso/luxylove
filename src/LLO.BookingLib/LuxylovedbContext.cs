// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

#nullable disable

namespace LLO.BookingLib
{
    public partial class LuxylovedbContext : DbContext
    {
        public LuxylovedbContext()
        {
        }

        public LuxylovedbContext(DbContextOptions<LuxylovedbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Address> Addresses { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<CustomerAddress> CustomerAddresses { get; set; }
        public virtual DbSet<LuxyBooking> LuxyBookings { get; set; }
        public virtual DbSet<LuxyBookingSchedule> LuxyBookingSchedules { get; set; }
        public virtual DbSet<LuxyDailyServiceTemplate> LuxyDailyServiceTemplates { get; set; }
        public virtual DbSet<LuxyRoom> LuxyRooms { get; set; }
        public virtual DbSet<LuxyService> LuxyServices { get; set; }
        public virtual DbSet<Product> Products { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseLazyLoadingProxies().UseSqlServer("Data Source=DESKTOP-0O24J6N;Initial Catalog=luxylovedb;Persist Security Info=True;User ID=carso;Password=123456$$");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS");

            modelBuilder.Entity<Address>(entity =>
            {
                entity.ToTable("Address");

                entity.HasIndex(e => e.CountryId, "IX_Address_CountryId");

                entity.HasIndex(e => e.StateProvinceId, "IX_Address_StateProvinceId");
            });

            modelBuilder.Entity<Customer>(entity =>
            {
                entity.ToTable("Customer");

                entity.HasIndex(e => e.BillingAddressId, "IX_Customer_BillingAddress_Id");

                entity.HasIndex(e => e.CreatedOnUtc, "IX_Customer_CreatedOnUtc");

                entity.HasIndex(e => e.CustomerGuid, "IX_Customer_CustomerGuid");

                entity.HasIndex(e => e.Email, "IX_Customer_Email");

                entity.HasIndex(e => e.ShippingAddressId, "IX_Customer_ShippingAddress_Id");

                entity.HasIndex(e => e.SystemName, "IX_Customer_SystemName");

                entity.HasIndex(e => e.Username, "IX_Customer_Username");

                entity.Property(e => e.BillingAddressId).HasColumnName("BillingAddress_Id");

                entity.Property(e => e.Email).HasMaxLength(1000);

                entity.Property(e => e.EmailToRevalidate).HasMaxLength(1000);

                entity.Property(e => e.ShippingAddressId).HasColumnName("ShippingAddress_Id");

                entity.Property(e => e.SystemName).HasMaxLength(400);

                entity.Property(e => e.Username).HasMaxLength(1000);

                entity.HasOne(d => d.BillingAddress)
                    .WithMany(p => p.CustomerBillingAddresses)
                    .HasForeignKey(d => d.BillingAddressId)
                    .HasConstraintName("FK_Customer_BillingAddress_Id_Address_Id");

                entity.HasOne(d => d.ShippingAddress)
                    .WithMany(p => p.CustomerShippingAddresses)
                    .HasForeignKey(d => d.ShippingAddressId)
                    .HasConstraintName("FK_Customer_ShippingAddress_Id_Address_Id");
            });

            modelBuilder.Entity<CustomerAddress>(entity =>
            {
                entity.HasKey(e => new { e.AddressId, e.CustomerId });

                entity.HasIndex(e => e.AddressId, "IX_CustomerAddresses_Address_Id");

                entity.HasIndex(e => e.CustomerId, "IX_CustomerAddresses_Customer_Id");

                entity.Property(e => e.AddressId).HasColumnName("Address_Id");

                entity.Property(e => e.CustomerId).HasColumnName("Customer_Id");

                entity.HasOne(d => d.Address)
                    .WithMany(p => p.CustomerAddresses)
                    .HasForeignKey(d => d.AddressId)
                    .HasConstraintName("FK_CustomerAddresses_Address_Id_Address_Id");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.CustomerAddresses)
                    .HasForeignKey(d => d.CustomerId)
                    .HasConstraintName("FK_CustomerAddresses_Customer_Id_Customer_Id");
            });

            modelBuilder.Entity<LuxyBooking>(entity =>
            {
                entity.HasKey(e => e.BookingGuid);

                entity.ToTable("Luxy_Booking");

                entity.Property(e => e.BookingGuid).HasDefaultValueSql("(newid())");

                entity.Property(e => e.CreatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CustomerName)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DiscountPrice).HasColumnType("decimal(12, 0)");

                entity.Property(e => e.EndDateTime).HasColumnType("datetime");

                entity.Property(e => e.Floor)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.IsOpen)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IsVoid)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.PhoneNumber)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Price).HasColumnType("decimal(12, 0)");

                entity.Property(e => e.RoomCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RoomNo)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RoomType)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDateTime).HasColumnType("datetime");

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.HasOne(d => d.RoomCodeNavigation)
                    .WithMany(p => p.LuxyBookings)
                    .HasForeignKey(d => d.RoomCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Luxy_Booking_Luxy_Room");
            });

            modelBuilder.Entity<LuxyBookingSchedule>(entity =>
            {
                entity.ToTable("Luxy_BookingSchedule");

                entity.Property(e => e.ActionByUsername)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Feedback)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.RatingCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ServiceCode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.StartDate).HasColumnType("datetime");

                entity.HasOne(d => d.BookingGu)
                    .WithMany(p => p.LuxyBookingSchedules)
                    .HasForeignKey(d => d.BookingGuid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Luxy_BookingSchedule_Luxy_Booking");

                entity.HasOne(d => d.ServiceCodeNavigation)
                    .WithMany(p => p.LuxyBookingSchedules)
                    .HasForeignKey(d => d.ServiceCode)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Luxy_BookingSchedule_Luxy_Service");

                entity.HasOne(d => d.Template)
                    .WithMany(p => p.LuxyBookingSchedules)
                    .HasForeignKey(d => d.TemplateId)
                    .HasConstraintName("FK_Luxy_BookingSchedule_Luxy_DailyServiceTemplate");
            });

            modelBuilder.Entity<LuxyDailyServiceTemplate>(entity =>
            {
                entity.ToTable("Luxy_DailyServiceTemplate");

                entity.Property(e => e.RoomCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ServiceCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.RoomCodeNavigation)
                    .WithMany(p => p.LuxyDailyServiceTemplates)
                    .HasForeignKey(d => d.RoomCode)
                    .HasConstraintName("FK_Luxy_DailyServiceTemplate_Luxy_Room");

                entity.HasOne(d => d.ServiceCodeNavigation)
                    .WithMany(p => p.LuxyDailyServiceTemplates)
                    .HasForeignKey(d => d.ServiceCode)
                    .HasConstraintName("FK_Luxy_DailyServiceTemplate_Luxy_Service");
            });

            modelBuilder.Entity<LuxyRoom>(entity =>
            {
                entity.HasKey(e => e.RoomCode);

                entity.ToTable("Luxy_Room");

                entity.Property(e => e.RoomCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Floor)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Name).HasMaxLength(150);

                entity.Property(e => e.Price).HasColumnType("decimal(12, 0)");

                entity.Property(e => e.RoomNo)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.RoomType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.LuxyRooms)
                    .HasForeignKey(d => d.ProductId)
                    .HasConstraintName("FK_Luxy_Room_Product");
            });

            modelBuilder.Entity<LuxyService>(entity =>
            {
                entity.HasKey(e => e.ServiceCode);

                entity.ToTable("Luxy_Service");

                entity.Property(e => e.ServiceCode)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ActionByUsername)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Description)
                    .HasMaxLength(250)
                    .IsUnicode(false);

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.LuxyServices)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Luxy_Service_Product");
            });

            modelBuilder.Entity<Product>(entity =>
            {
                entity.ToTable("Product");

                entity.HasIndex(e => new { e.Deleted, e.VendorId, e.ProductTypeId, e.ManageInventoryMethodId, e.MinStockQuantity, e.UseMultipleWarehouses }, "IX_GetLowStockProducts");

                entity.HasIndex(e => new { e.Deleted, e.Id }, "IX_Product_Delete_Id");

                entity.HasIndex(e => new { e.Published, e.Deleted }, "IX_Product_Deleted_and_Published");

                entity.HasIndex(e => e.LimitedToStores, "IX_Product_LimitedToStores");

                entity.HasIndex(e => e.ParentGroupedProductId, "IX_Product_ParentGroupedProductId");

                entity.HasIndex(e => new { e.Price, e.AvailableStartDateTimeUtc, e.AvailableEndDateTimeUtc, e.Published, e.Deleted }, "IX_Product_PriceDatesEtc");

                entity.HasIndex(e => e.Published, "IX_Product_Published");

                entity.HasIndex(e => e.ShowOnHomepage, "IX_Product_ShowOnHomepage");

                entity.HasIndex(e => e.SubjectToAcl, "IX_Product_SubjectToAcl");

                entity.HasIndex(e => e.VisibleIndividually, "IX_Product_VisibleIndividually");

                entity.HasIndex(e => new { e.VisibleIndividually, e.Published, e.Deleted }, "IX_Product_VisibleIndividually_Published_Deleted_Extended");

                entity.Property(e => e.AdditionalShippingCharge).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.AllowedQuantities).HasMaxLength(1000);

                entity.Property(e => e.BasepriceAmount).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.BasepriceBaseAmount).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Gtin).HasMaxLength(400);

                entity.Property(e => e.Height).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Length).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.ManufacturerPartNumber).HasMaxLength(400);

                entity.Property(e => e.MaximumCustomerEnteredPrice).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.MetaKeywords).HasMaxLength(400);

                entity.Property(e => e.MetaTitle).HasMaxLength(400);

                entity.Property(e => e.MinimumCustomerEnteredPrice).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(400);

                entity.Property(e => e.OldPrice).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.OverriddenGiftCardAmount).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Price).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.ProductCost).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.RequiredProductIds).HasMaxLength(1000);

                entity.Property(e => e.Sku).HasMaxLength(400);

                entity.Property(e => e.Weight).HasColumnType("decimal(18, 4)");

                entity.Property(e => e.Width).HasColumnType("decimal(18, 4)");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}